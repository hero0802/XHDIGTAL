//包名

package trunk_mso_bs;
import  "trunk_common.proto";
option java_package = "com.protobuf";
option java_outer_classname = "TrunkMsoBs";

//	上行心跳[基站到中心]
message HeartBeatIN
{
	required uint32	workstatus 			= 1;	//[0:信道机正常  1：信道机异常]
	optional string	db_updatetime 		= 2;	//基站数据库更新时间，用于数据库同步
	optional uint32 gps_sec				= 3;	//[0-59]当前GPS秒值
	optional uint32 gps_stars_num		= 4;	//GPS卫星数量
	optional uint32 gps_lock			= 5;	//[0:GPS未锁定，1:GPS锁定]
	optional uint32 slot0_rssi			= 6;	//心跳时间段内0时隙的rssi平均值[0-255]
	optional uint32 slot1_rssi			= 7;	//心跳时间段内1时隙的rssi平均值[0-255]
}
//	下行心跳[中心到基站]
message HeartBeatOUT
{
	required uint32	workstatus 			= 1;  	//当前基站工作状态[0:信道机正常  1：信道机异常]
	optional uint32	slot0status 		= 2;  	//0时隙状态[0: edle, 1: busy, 2: TSCC]
	optional uint32	slot1status 		= 3;  	//1时隙状态[0: edle, 1: busy, 2: TSCC]
	optional uint32	is_multicast_src	= 4;	//[0:不是组播源，1:是组播源]
}

//基站频率列表信息请求
//BSChannelREQ

//基站频率列表信息应答[该命令单方向有效：基站->中心]
//BSChannelRES消息应在以下几种情况同步：1、重新连接上中心时基站主动发送；2、中心下发BSChannelREQ命令时回应；
//3、信道频率列表发生变化时主动发送；4、当前信道改变时主动发送
message BSChannelRES
{
	repeated 	trunk_common.ChannelPair	chlist				= 1;	//信道机内置频率列表[可重复]
	required	trunk_common.ChannelPair	cur_channel			= 2;	//当前频率号
}

//切换到指定信道请求[中心->基站]
message SwitchChannelREQ
{
	required	trunk_common.ChannelPair	newchannel			= 1;	//新指定频率
}
//切换到指定信道应答[基站->中心]
message SwitchChannelRES
{
	required	trunk_common.ChannelPair	newchannel			= 1;	//新指定频率
	optional	trunk_common.Ack			ack					= 2;
}

//常规激活请求
message ActiveREQ
{
	required uint32 	srcid 	= 1;     	//主叫ID号
	optional uint32		slot	= 2;		//时隙[0-1]
	optional uint32    	count	= 3;		//计数
}

//常规激活应答
message ActiveRES
{
	required uint32 				srcid 		= 1;     //主叫ID号
	optional uint32					slot		= 2;	//时隙[0-1]
	optional uint32    				new_count	= 3;	//新计数
	optional uint32    				on_off		= 4;	//1:激活 0:去激活
	optional bool     				is_src		= 5;	//1:源基站 0：非源基站
	optional trunk_common.Ack		ack			= 6;	//应答
}

//中心->基站
message RSSIREQ
{
	required uint32 	slot		= 1;
}

//基站->中心
message RSSIRES
{
	required uint32 	slot		= 1;
	required int32		rssi		= 2;
}

//中心->基站
message BSInfo
{
	optional uint32		bsid						= 1;	//基站ID
	optional uint32		sic							= 2;	//16位系统码
	optional uint32		cc							= 3;	//色码
	optional uint32		sleepen						= 4;	//0:单站休眠 1:单站工作
	optional uint32 	channelnum 					= 5;	//信道号(PDT规定)
	optional uint32		startwatchdog				= 6;	//0:不开启看门狗 1:开启看门狗
	optional trunk_common.SystemInfo	systeminfo 	= 7;	//系统基本参数
	optional uint32		offlinech					= 8;	//脱网信道
	optional uint32		offlinerepeaten				= 9;	//脱网转发使能[0:禁止 1:允许]
	optional uint32		admode						= 10;	//模数工作模式[0:模拟， 1:数字]
	optional uint32		wan_en 						= 11;	//公网使能[0:禁止 1:允许]
	optional string		wan_centerip				= 12;	//公网中心IP	
	optional uint32		wan_centerport				= 13;	//公网中心TCP端口
	optional string		wan_switchip				= 14;	//公网交换IP
	optional uint32		wan_switchport				= 15;	//公网交换接收端口
	optional uint32		udprecvport					= 16;	//基站本地UDP接收端口
	optional uint32		issimulcast					= 17;	//0:单播，1：同播
	optional uint32		gpsnum_delay				= 18;	//GPS计数延迟，用于公网传输
}

//基站->中心
//基站收到音频后，一个超桢通知中心一次
message AudioDecode
{
	optional uint32		slot 	= 1;	//时隙[0-1]
	optional uint32		status 	= 2;	//状态[0-1] 0:解桢出错或无法解桢 1：解桢正确
}

//同步请求
//message AllBSSyncREQ

message AllBSSyncRES
{
	required uint32 	gps_sec_num = 1;		//[0-59]基站GPS秒同步，所有基站在此时刻同步
}
